public class TicTacToe{
    private final int BOARDSIZE = 3;
    private char[][] board;
    private boolean firstPLayer;
    private boolean gameOver;

/Enum game Status
public enum Status{
WIN, DRAW, Continue
}


    /*Constructor to start a new board
     * there is no parameter and no returing value because it is just 
     * initializing the value of the empty game
     */
    public TicTacToe(){
        board = new char[BOARDSIZE][BOARDSIZE];//3X3 board
        firstPLayer = true; //player 1 gets X and player 2 gets 0
        gameOver = false; // initializing game 
        emptyBoard();// method to set all the spots with no inititial value
    }


    /* Method to initialize the board
    * there is no parameters and will return anything
    *It is private because we do not want the player's or anybody to change the starting values
    */
    private void emptyBoard(){
        for(int i =0; i< BOARDSIZE; i++){//ROWS
            for int j =0; j< BOARDSIZE, j++){//COLUMNS
                board[i][j] = " ";//every square will start empty
            }
        }

    }


    /*Method to print player's turn
     * private because it is used to just diplay info not change anything
     * Parameter is the player and it is an int because its either player 1 or 2
     * there is no retun value because it is just displaying which player's turn it is
     */
    private printCurrentPLayer(int player){
        if(player == 1){
            System.out.println("Player X's turn.");

        }
        else{
            System.out.println("Player O's turn.");
        }

    }

//place (X or O)
private void printSymbol(int row, int column, char value){
board[row][column]=value
}

public Status gamestatus() {
//columns and rows
for(int i=0;i<BOARDSIZE;i++){
if (board[i][0] != ' ' && board[i][0] == board[i][1] && board[i][1] == board[i][2]) {
                return Status.WIN;
            }
            if (board[0][i] != ' ' && board[0][i] == board[1][i] && board[1][i] == board[2][i]) {
                return Status.WIN;
            }
}
 //diagonals
if (board[0][0] != ' ' && board[0][0] == board[1][1] && board[1][1] == board[2][2]) {
            return Status.WIN;
        }
        if (board[0][2] != ' ' && board[0][2] == board[1][1] && board[1][1] == board[2][0]) {
            return Status.WIN;
        }

}

}
